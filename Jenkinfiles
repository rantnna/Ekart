pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                //git branch: 'main', url: 'https://github.com/rantnna/Ekart.git'
                //checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rantnna/Ekart.git']])
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git_cred', url: 'https://github.com/rantnna/Ekart.git']])
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test case') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        
        
        stage('Sonarqube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                    sh """${SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectName=Ekart \
                    -Dsonar.projectKey=Ekart \
                    -Dsonar.java.binaries=target/classes """
                    }
                }
            }
        }

        
        stage('Trivy File scan') {
            steps {
                sh "trivy fs ."
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Build and Tag Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker_cred', toolName: 'docker') {
                        sh "docker build -t shopping-cart:dev -f docker/Dockerfile . "
                        sh "docker tag shopping-cart:dev ranjitdkr/shopping-cart:dev"
                    }
                }
               
            }
        }
        
        
        
        stage('Push Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker_cred', toolName: 'docker') {
                        
                        sh "docker push ranjitdkr/shopping-cart:dev"
                    }
                }
               
            }
        }
        
        stage('Deploy to Docker Container') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker_cred', toolName: 'docker') {
                        
                        sh "docker run -d -p 8070:8070 ranjitdkr/shopping-cart:dev"
                    }
                }
               
            }
        }
    }
}
